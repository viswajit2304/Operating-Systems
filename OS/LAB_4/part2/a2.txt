When this program is run an integer array is created and pointer to it's base adress is given to data and when free(data) is called and hence the memory allocated for array is freed and data points to some arbitary location.
When run with valgrind we get an error saying invalid read of size 4 which is the access we were trying to access in the array.
So, this program is incorrect.


==4949== Memcheck, a memory error detector
==4949== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==4949== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==4949== Command: ./q2
==4949==
==4949== Invalid read of size 4
==4949==    at 0x1091B7: main (in /mnt/c/Users/svv23/OneDrive/Desktop/lab4/Q2/Q2/q2)
==4949==  Address 0x4a8e068 is 40 bytes inside a block of size 400 free'd
==4949==    at 0x484B27F: free (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==4949==    by 0x1091AE: main (in /mnt/c/Users/svv23/OneDrive/Desktop/lab4/Q2/Q2/q2)
==4949==  Block was alloc'd at
==4949==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==4949==    by 0x10919E: main (in /mnt/c/Users/svv23/OneDrive/Desktop/lab4/Q2/Q2/q2)
==4949==
data[] = 0
==4949==
==4949== HEAP SUMMARY:
==4949==     in use at exit: 0 bytes in 0 blocks
==4949==   total heap usage: 2 allocs, 2 frees, 1,424 bytes allocated
==4949==
==4949== All heap blocks were freed -- no leaks are possible
==4949==
==4949== For lists of detected and suppressed errors, rerun with: -s
==4949== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)